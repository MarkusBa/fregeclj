module fregeclj.Fregeclj where

{-- note that you need to run lein fregec
     
     Steps if you have clojure code that depends on frege that depends on clojure:
     lein clean
     Change Frege class to not depend on clojure.
     lein fregec
     lein repl (or some other command that compiles the clojure code) like lein compile
     Change Frege class
     lein fregec
--}


data PersistentMap k v = native clojure.lang.IPersistentMap where
  pure native empty clojure.lang.PersistentHashMap.EMPTY :: PersistentMap k v
  pure native assoc :: PersistentMap k v -> k -> v -> PersistentMap k v
  pure native valAt :: PersistentMap k v -> k -> v -> v

  fromKVList :: [(k, v)] -> PersistentMap k v
  fromKVList xs = foldl addItem PersistentMap.empty xs where
    addItem m (k, v) = PersistentMap.assoc m k v

data Keyword = native clojure.lang.Keyword    

                       
data DatabaseAccess = native com.fregeclj.DatabaseAccess where 
 pure native testkeyword com.fregeclj.DatabaseAccess.testkeyword :: Int -> Keyword
 --native getitems com.fregeclj.DatabaseAccess.testme :: Int -> IO List PersistentMap 
        
                        
testFrege ::  Keyword
--testFrege x = x + 1
testFrege =  DatabaseAccess.testkeyword 1    

